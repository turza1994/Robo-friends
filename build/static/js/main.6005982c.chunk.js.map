{"version":3,"sources":["serviceWorker.js","robots.js","Card.js","CardList.js","Searchbox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","robots","id","name","username","email","Card","className","src","CardList","cardComp","map","user","i","key","Searchbox","onSearchChange","this","props","searchChange","class","type","placeholder","onChange","Component","Scroll","style","overflowY","height","border","children","App","state","fetch","then","response","json","setState","e","target","value","filteredRobot","length","toLowerCase","includes","push","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCClBOC,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC5CIC,EAZF,SAAC,GAAqB,IAApBJ,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAME,EAAS,EAATA,MAEjB,OACI,yBAAKE,UAAU,uDACX,yBAAKC,IAAG,+BAA0BN,EAA1B,mBACR,qCAAWC,EAAX,KACA,qCAAWE,EAAX,OCoBDI,EAzBE,SAAC,GAAY,IAAXR,EAAU,EAAVA,OAQXS,EAAWT,EAAOU,KAAI,SAACC,EAAMC,GACzB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLX,GAAID,EAAOY,GAAGX,GACdC,KAAMF,EAAOY,GAAGV,KAChBE,MAAOJ,EAAOY,GAAGR,WAIjC,OACI,yBAAKE,UAAU,gBACTG,ICNCK,E,uKAdP,IAAIC,EAAiBC,KAAKC,MAAMC,aAChC,OACI,6BACI,2BACAC,MAAM,6CACNC,KAAO,SACPC,YAAY,oBACZC,SAAUP,S,GATFQ,aCQTC,EARA,SAACP,GACZ,OACI,yBAAKX,UAAU,MAAMmB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,QAASC,OAAQ,oBACvEX,EAAMY,WC+CJC,E,kDA5CX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CAET/B,OAAQ,IAJH,E,gEASO,IAAD,OACfgC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SAAS,CAACpC,OAAOmC,S,+BAG/B,IAAD,OAgBJ,OACI,yBAAK7B,UAAU,MACX,wBAAIA,UAAU,YAAd,gBACA,kBAAC,EAAD,CAAWY,aAjBE,SAACmB,GAGlB,IAFA,IAAInC,EAAOmC,EAAEC,OAAOC,MAChBC,EAAgB,GACZ5B,EAAE,EAAGA,EAAEZ,EAAOyC,OAAQ7B,IACvBZ,EAAOY,GAAGV,KAAKwC,cAAcC,SAASzC,EAAKwC,gBAC1CF,EAAcI,KAAK5C,EAAOY,IAGlCiC,QAAQC,IAAIN,GACZ,EAAKJ,SAAS,CAACpC,OAAQwC,OASnB,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxC,OAAQgB,KAAKe,MAAM/B,e,GAtC/BuB,aCClBwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACI,kBAAC,EAAD,QAGNC,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAMC,a","file":"static/js/main.6005982c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email})=>{\r\n    \r\n        return(\r\n            <div className=\"bg-near-white dib br3 pa3 ma3 grow bw-4 shadow-5 tc\">\r\n                <img src={`https://robohash.org/${id}?size=200x200`}></img>\r\n                <h3>Name: {name} </h3>\r\n                <p>email: {email} </p>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\n\r\nimport React from 'react';\r\n\r\nconst CardList = ({robots})=>{\r\n    // const cardComp = ()=>{\r\n    //     var arr = [];\r\n    //     for(var i=0; i<10; i++){\r\n    //         arr.push(<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />);\r\n    //     }\r\n    //     return arr;\r\n    // }\r\n    let cardComp = robots.map((user, i) => {\r\n            return (\r\n                <Card\r\n                    key={i}\r\n                    id={robots[i].id}\r\n                    name={robots[i].name}\r\n                    email={robots[i].email}\r\n                />\r\n                );\r\n            })\r\n    return(\r\n        <div className='CardList ph5'>\r\n            { cardComp }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass Searchbox extends Component{\r\n    render(){\r\n        let onSearchChange = this.props.searchChange;\r\n        return(\r\n            <div>\r\n                <input \r\n                class=\"input-reset ba b--black-20 pa2 mb2 w-30 tc\"\r\n                type = \"search\"\r\n                placeholder=\"Search for robots\"\r\n                onChange={onSearchChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div className=\"mt2\" style={{ overflowY: 'scroll', height: '800px', border: '1px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import {robots} from'./robots';\r\nimport CardList from './CardList';\r\nimport Searchbox from './Searchbox';\r\nimport Scroll from './Scroll';\r\n\r\nimport React, { Component } from 'react';\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            \r\n            robots: []\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(json => this.setState({robots:json}));\r\n    }\r\n\r\n    render(){\r\n\r\n        let onSearchChange = (e)=>{\r\n            let name = e.target.value;\r\n            let filteredRobot = [];\r\n            for(let i=0; i<robots.length; i++){\r\n                if(robots[i].name.toLowerCase().includes(name.toLowerCase())){\r\n                    filteredRobot.push(robots[i]);\r\n                }\r\n            }\r\n            console.log(filteredRobot);\r\n            this.setState({robots: filteredRobot});\r\n            \r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1 fw9 b\">Robo Friends</h1>\r\n                <Searchbox searchChange = { onSearchChange } />\r\n                <Scroll>\r\n                    <CardList robots={this.state.robots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons/css/tachyons.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n        <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}